<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Brett Lischalk</title>
    <description></description>
    <link>http://brettlischalk.com/</link>
    <atom:link href="http://brettlischalk.com//feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>SLAE Problem 2: Reverse TCP Shellcode</title>
        <description>A nice walkthrough of creating a reverse shellcode from scratch</description>
        <pubDate>Tue, 20 Dec 2016 00:00:00 -0600</pubDate>
        <link>http://brettlischalk.com//posts/slae-problem-2-reverse-tcp-shellcode</link>
        <guid isPermaLink="true">http://brettlischalk.com//posts/slae-problem-2-reverse-tcp-shellcode</guid>
      </item>
    
      <item>
        <title>SLAE Problem 1: TCP Bind Shell Shellcode</title>
        <description>From my experience playing around with socket programming in C and Python, there is a basic formula and group of function calls for creating clients and servers. Most of them will be useful to us. A couple won't be applicable to our situation.</description>
        <pubDate>Sun, 18 Dec 2016 00:00:00 -0600</pubDate>
        <link>http://brettlischalk.com//posts/slae-problem-1-tcp-bind-shellcode</link>
        <guid isPermaLink="true">http://brettlischalk.com//posts/slae-problem-1-tcp-bind-shellcode</guid>
      </item>
    
      <item>
        <title>Using Clj-http When A Web App Has CSRF Protection</title>
        <description>Recently when working on a Clojure web app I ran into a scenario where I wanted to do a little bit of integration testing. What I wanted to do was post some data to the same endpoint that my webform would post to. The problem was that the app used ring-anti-forgery for CSRF protection. Because of this, I needed to figure out a way to spoof this anti-forgery token when making POST requests using Clj-http. The solution came out of a lot of trial and error.</description>
        <pubDate>Wed, 15 Apr 2015 00:00:00 -0500</pubDate>
        <link>http://brettlischalk.com//posts/using-clj-http-when-a-web-app-has-csrf-protection</link>
        <guid isPermaLink="true">http://brettlischalk.com//posts/using-clj-http-when-a-web-app-has-csrf-protection</guid>
      </item>
    
      <item>
        <title>5 Great Experiences While Learning Clojure</title>
        <description>Lately I have been exploring functional programming and have been spending a lot of time working with Clojure.  As I spend more and more time with it I find that there are particular aspects of the language that I find beautiful and enjoyable.  Some of these aspects come from the fact that Clojure is a LISP dialect of programming language.  Other aspects come from the fact that Clojure is a functional language.  Here are 5 great experiences I have had while learning the language:</description>
        <pubDate>Sat, 26 Apr 2014 00:00:00 -0500</pubDate>
        <link>http://brettlischalk.com//posts/5-great-experiences-while-learning-clojure</link>
        <guid isPermaLink="true">http://brettlischalk.com//posts/5-great-experiences-while-learning-clojure</guid>
      </item>
    
      <item>
        <title>RailsConf 2014</title>
        <description>Today wrapped up RailsConf 2014 in Chicago, Illinois and I have to say that it was quite a good time.  This was my first RailsConf and it definitely lived up to its reputation.  From DHH trolling that TDD is nonsense in his Keynote speech to Tenderlove making a live merge of the &quot;AdequateRecord&quot; branch into Rails master it was never a dull moment.</description>
        <pubDate>Fri, 25 Apr 2014 00:00:00 -0500</pubDate>
        <link>http://brettlischalk.com//posts/railsconf-2014</link>
        <guid isPermaLink="true">http://brettlischalk.com//posts/railsconf-2014</guid>
      </item>
    
      <item>
        <title>Ruby Dir &quot;Random&quot; on Linux but Alphabetical on OSX</title>
        <description>Recently after a co-worker pushed code to our continuous integration server Jenkins was saying that the build was broken and that a constant was being called that wasn’t initialized. What was strange is that the code my co-worker pushed ran just fine when I ran it on my work Mac Laptop as well as some of my other co-workers Mac Laptops. This has to be some sort of weird Mac / Linux difference.</description>
        <pubDate>Wed, 03 Jul 2013 00:00:00 -0500</pubDate>
        <link>http://brettlischalk.com//posts/ruby-dir-random-on-linux-but-alphabetical-on-osx</link>
        <guid isPermaLink="true">http://brettlischalk.com//posts/ruby-dir-random-on-linux-but-alphabetical-on-osx</guid>
      </item>
    
      <item>
        <title>Drupal Views: Using Multiple Databases in Result Set</title>
        <description>Recently while working at my day job the need arose to utilize multiple databases to deliver a result in Drupal’s Views module. Not only did we need to utilize multiple databases but the databases reside on two different servers. I know that Drupal has the ability to connect to multiple databases but I had never considered how Views would utilize both databases or if it was even possible.</description>
        <pubDate>Sat, 13 Oct 2012 00:00:00 -0500</pubDate>
        <link>http://brettlischalk.com//posts/drupal-views-using-multiple-databases-in-result-set</link>
        <guid isPermaLink="true">http://brettlischalk.com//posts/drupal-views-using-multiple-databases-in-result-set</guid>
      </item>
    
      <item>
        <title>Data Munging in Ruby on Rails</title>
        <description>It has been awhile since my last blog post and quite a lot has happened. Since my last blog post I have completed a large Drupal 5 to Drupal 7 migration (The d5 to d7 migration has actually been an ongoing endeavor that was finally completed after a years worth of development), implemented authorization via cancan on this blog, and implemented nested comments via polymorphic associations and the ancestry gem on this blog. I should have quite a lot to talk about now!</description>
        <pubDate>Sat, 23 Jun 2012 00:00:00 -0500</pubDate>
        <link>http://brettlischalk.com//posts/data-munging-in-ruby-on-rails</link>
        <guid isPermaLink="true">http://brettlischalk.com//posts/data-munging-in-ruby-on-rails</guid>
      </item>
    
      <item>
        <title>Twitterfeed bit.ly URL Links Broken and Link to Tinyurl</title>
        <description>After setting up a Twitterfeed account to populate my social networking profiles with data from my blog’s Atom feed, I immediately noticed that the shortened bit.ly links that Twitterfeed was sending to my social media sites were broken. Even though I had selected bit.ly as the service I would like to use to shorten my url’s, the links would show up on Twitter, Facebook, and Linkedin as Tinyurl links</description>
        <pubDate>Fri, 23 Mar 2012 00:00:00 -0500</pubDate>
        <link>http://brettlischalk.com//posts/twitterfeed-bit-ly-url-links-broken-and-link-to-tinyurl</link>
        <guid isPermaLink="true">http://brettlischalk.com//posts/twitterfeed-bit-ly-url-links-broken-and-link-to-tinyurl</guid>
      </item>
    
  </channel>
</rss>
